// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/hydrator/nexpose.go

// Package hydrator is a generated GoMock package.
package hydrator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVulnerabilitySolutionsFetcher is a mock of VulnerabilitySolutionsFetcher interface
type MockVulnerabilitySolutionsFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockVulnerabilitySolutionsFetcherMockRecorder
}

// MockVulnerabilitySolutionsFetcherMockRecorder is the mock recorder for MockVulnerabilitySolutionsFetcher
type MockVulnerabilitySolutionsFetcherMockRecorder struct {
	mock *MockVulnerabilitySolutionsFetcher
}

// NewMockVulnerabilitySolutionsFetcher creates a new mock instance
func NewMockVulnerabilitySolutionsFetcher(ctrl *gomock.Controller) *MockVulnerabilitySolutionsFetcher {
	mock := &MockVulnerabilitySolutionsFetcher{ctrl: ctrl}
	mock.recorder = &MockVulnerabilitySolutionsFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVulnerabilitySolutionsFetcher) EXPECT() *MockVulnerabilitySolutionsFetcherMockRecorder {
	return m.recorder
}

// FetchVulnerabilitySolutions mocks base method
func (m *MockVulnerabilitySolutionsFetcher) FetchVulnerabilitySolutions(ctx context.Context, vulnID string) ([]string, error) {
	ret := m.ctrl.Call(m, "FetchVulnerabilitySolutions", ctx, vulnID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchVulnerabilitySolutions indicates an expected call of FetchVulnerabilitySolutions
func (mr *MockVulnerabilitySolutionsFetcherMockRecorder) FetchVulnerabilitySolutions(ctx, vulnID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchVulnerabilitySolutions", reflect.TypeOf((*MockVulnerabilitySolutionsFetcher)(nil).FetchVulnerabilitySolutions), ctx, vulnID)
}

// MockSolutionFetcher is a mock of SolutionFetcher interface
type MockSolutionFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockSolutionFetcherMockRecorder
}

// MockSolutionFetcherMockRecorder is the mock recorder for MockSolutionFetcher
type MockSolutionFetcherMockRecorder struct {
	mock *MockSolutionFetcher
}

// NewMockSolutionFetcher creates a new mock instance
func NewMockSolutionFetcher(ctrl *gomock.Controller) *MockSolutionFetcher {
	mock := &MockSolutionFetcher{ctrl: ctrl}
	mock.recorder = &MockSolutionFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSolutionFetcher) EXPECT() *MockSolutionFetcherMockRecorder {
	return m.recorder
}

// FetchSolution mocks base method
func (m *MockSolutionFetcher) FetchSolution(ctx context.Context, solutionID string) (string, error) {
	ret := m.ctrl.Call(m, "FetchSolution", ctx, solutionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSolution indicates an expected call of FetchSolution
func (mr *MockSolutionFetcherMockRecorder) FetchSolution(ctx, solutionID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSolution", reflect.TypeOf((*MockSolutionFetcher)(nil).FetchSolution), ctx, solutionID)
}

// MockAssetVulnerabilitiesFetcher is a mock of AssetVulnerabilitiesFetcher interface
type MockAssetVulnerabilitiesFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockAssetVulnerabilitiesFetcherMockRecorder
}

// MockAssetVulnerabilitiesFetcherMockRecorder is the mock recorder for MockAssetVulnerabilitiesFetcher
type MockAssetVulnerabilitiesFetcherMockRecorder struct {
	mock *MockAssetVulnerabilitiesFetcher
}

// NewMockAssetVulnerabilitiesFetcher creates a new mock instance
func NewMockAssetVulnerabilitiesFetcher(ctrl *gomock.Controller) *MockAssetVulnerabilitiesFetcher {
	mock := &MockAssetVulnerabilitiesFetcher{ctrl: ctrl}
	mock.recorder = &MockAssetVulnerabilitiesFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAssetVulnerabilitiesFetcher) EXPECT() *MockAssetVulnerabilitiesFetcherMockRecorder {
	return m.recorder
}

// FetchAssetVulnerabilities mocks base method
func (m *MockAssetVulnerabilitiesFetcher) FetchAssetVulnerabilities(ctx context.Context, assetID int64) ([]NexposeAssetVulnerability, error) {
	ret := m.ctrl.Call(m, "FetchAssetVulnerabilities", ctx, assetID)
	ret0, _ := ret[0].([]NexposeAssetVulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAssetVulnerabilities indicates an expected call of FetchAssetVulnerabilities
func (mr *MockAssetVulnerabilitiesFetcherMockRecorder) FetchAssetVulnerabilities(ctx, assetID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAssetVulnerabilities", reflect.TypeOf((*MockAssetVulnerabilitiesFetcher)(nil).FetchAssetVulnerabilities), ctx, assetID)
}

// MockVulnerabilityDetailsFetcher is a mock of VulnerabilityDetailsFetcher interface
type MockVulnerabilityDetailsFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockVulnerabilityDetailsFetcherMockRecorder
}

// MockVulnerabilityDetailsFetcherMockRecorder is the mock recorder for MockVulnerabilityDetailsFetcher
type MockVulnerabilityDetailsFetcherMockRecorder struct {
	mock *MockVulnerabilityDetailsFetcher
}

// NewMockVulnerabilityDetailsFetcher creates a new mock instance
func NewMockVulnerabilityDetailsFetcher(ctrl *gomock.Controller) *MockVulnerabilityDetailsFetcher {
	mock := &MockVulnerabilityDetailsFetcher{ctrl: ctrl}
	mock.recorder = &MockVulnerabilityDetailsFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVulnerabilityDetailsFetcher) EXPECT() *MockVulnerabilityDetailsFetcherMockRecorder {
	return m.recorder
}

// FetchVulnerabilityDetails mocks base method
func (m *MockVulnerabilityDetailsFetcher) FetchVulnerabilityDetails(ctx context.Context, vulnID string) (NexposeVulnerability, error) {
	ret := m.ctrl.Call(m, "FetchVulnerabilityDetails", ctx, vulnID)
	ret0, _ := ret[0].(NexposeVulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchVulnerabilityDetails indicates an expected call of FetchVulnerabilityDetails
func (mr *MockVulnerabilityDetailsFetcherMockRecorder) FetchVulnerabilityDetails(ctx, vulnID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchVulnerabilityDetails", reflect.TypeOf((*MockVulnerabilityDetailsFetcher)(nil).FetchVulnerabilityDetails), ctx, vulnID)
}
