// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asecurityteam/nexpose-vuln-hydrator/pkg/hydrator (interfaces: AssetVulnerabilityHydrator)

// Package hydrator is a generated GoMock package.
package hydrator

import (
	context "context"
	domain "github.com/asecurityteam/nexpose-vuln-hydrator/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAssetVulnerabilityHydrator is a mock of AssetVulnerabilityHydrator interface
type MockAssetVulnerabilityHydrator struct {
	ctrl     *gomock.Controller
	recorder *MockAssetVulnerabilityHydratorMockRecorder
}

// MockAssetVulnerabilityHydratorMockRecorder is the mock recorder for MockAssetVulnerabilityHydrator
type MockAssetVulnerabilityHydratorMockRecorder struct {
	mock *MockAssetVulnerabilityHydrator
}

// NewMockAssetVulnerabilityHydrator creates a new mock instance
func NewMockAssetVulnerabilityHydrator(ctrl *gomock.Controller) *MockAssetVulnerabilityHydrator {
	mock := &MockAssetVulnerabilityHydrator{ctrl: ctrl}
	mock.recorder = &MockAssetVulnerabilityHydratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAssetVulnerabilityHydrator) EXPECT() *MockAssetVulnerabilityHydratorMockRecorder {
	return m.recorder
}

// HydrateAssetVulnerability mocks base method
func (m *MockAssetVulnerabilityHydrator) HydrateAssetVulnerability(arg0 context.Context, arg1 domain.NexposeAssetVulnerability) (domain.VulnerabilityDetails, error) {
	ret := m.ctrl.Call(m, "HydrateAssetVulnerability", arg0, arg1)
	ret0, _ := ret[0].(domain.VulnerabilityDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HydrateAssetVulnerability indicates an expected call of HydrateAssetVulnerability
func (mr *MockAssetVulnerabilityHydratorMockRecorder) HydrateAssetVulnerability(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HydrateAssetVulnerability", reflect.TypeOf((*MockAssetVulnerabilityHydrator)(nil).HydrateAssetVulnerability), arg0, arg1)
}
