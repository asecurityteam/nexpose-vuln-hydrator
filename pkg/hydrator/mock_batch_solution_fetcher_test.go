// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asecurityteam/nexpose-vuln-hydrator/pkg/hydrator (interfaces: BatchSolutionFetcher)

// Package hydrator is a generated GoMock package.
package hydrator

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBatchSolutionFetcher is a mock of BatchSolutionFetcher interface
type MockBatchSolutionFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockBatchSolutionFetcherMockRecorder
}

// MockBatchSolutionFetcherMockRecorder is the mock recorder for MockBatchSolutionFetcher
type MockBatchSolutionFetcherMockRecorder struct {
	mock *MockBatchSolutionFetcher
}

// NewMockBatchSolutionFetcher creates a new mock instance
func NewMockBatchSolutionFetcher(ctrl *gomock.Controller) *MockBatchSolutionFetcher {
	mock := &MockBatchSolutionFetcher{ctrl: ctrl}
	mock.recorder = &MockBatchSolutionFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatchSolutionFetcher) EXPECT() *MockBatchSolutionFetcherMockRecorder {
	return m.recorder
}

// BatchFetchSolution mocks base method
func (m *MockBatchSolutionFetcher) BatchFetchSolution(arg0 context.Context, arg1 []string) ([]string, error) {
	ret := m.ctrl.Call(m, "BatchFetchSolution", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchFetchSolution indicates an expected call of BatchFetchSolution
func (mr *MockBatchSolutionFetcherMockRecorder) BatchFetchSolution(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchFetchSolution", reflect.TypeOf((*MockBatchSolutionFetcher)(nil).BatchFetchSolution), arg0, arg1)
}
